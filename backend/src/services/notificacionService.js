/**
 * FLIPY - Servicio de Notificaciones
 * Sistema SIMULADO de notificaciones WhatsApp
 * 
 * ===========================================
 * INTEGRACI√ìN TWILIO/360DIALOG (FUTURO)
 * ===========================================
 * 
 * Para activar env√≠o real de WhatsApp:
 * 
 * 1. Instalar: npm install twilio
 * 
 * 2. Agregar a .env:
 *    TWILIO_ACCOUNT_SID=xxx
 *    TWILIO_AUTH_TOKEN=xxx
 *    TWILIO_WHATSAPP_NUMBER=whatsapp:+14155238886
 * 
 * 3. Reemplazar funci√≥n enviarWhatsApp con:
 *    const twilio = require('twilio');
 *    const client = twilio(process.env.TWILIO_ACCOUNT_SID, process.env.TWILIO_AUTH_TOKEN);
 *    
 *    const message = await client.messages.create({
 *      from: process.env.TWILIO_WHATSAPP_NUMBER,
 *      to: `whatsapp:${telefono}`,
 *      body: mensaje
 *    });
 * 
 * ===========================================
 */

const { PrismaClient } = require('@prisma/client');
const prisma = new PrismaClient();

/**
 * Validar formato de tel√©fono
 * Debe ser: +51XXXXXXXXX (Per√∫)
 */
const validarTelefono = (telefono) => {
  if (!telefono) return false;
  const regex = /^\+51\d{9}$/;
  return regex.test(telefono);
};

/**
 * Verificar si hay notificaci√≥n duplicada reciente (< 1 minuto)
 */
const existeNotificacionReciente = async (destinatario, mensaje) => {
  const unMinutoAtras = new Date(Date.now() - 60 * 1000);
  
  const notificacionReciente = await prisma.notificacion.findFirst({
    where: {
      destinatario,
      mensaje,
      createdAt: {
        gte: unMinutoAtras
      }
    }
  });

  return !!notificacionReciente;
};

/**
 * Enviar notificaci√≥n por WhatsApp (SIMULADO)
 * 
 * @param {string} telefono - Formato: +51XXXXXXXXX
 * @param {string} mensaje - Texto del mensaje (m√°x 1600 chars)
 * @param {object} metadata - Info adicional (envioId, userId, etc)
 * @returns {Promise<{success: boolean, notificacionId?: string, error?: string}>}
 */
const enviarWhatsApp = async (telefono, mensaje, metadata = {}) => {
  try {
    console.log('===========================================');
    console.log('üîî INICIO - Enviar WhatsApp');
    console.log('===========================================');
    console.log('Tel√©fono:', telefono);
    console.log('Mensaje (primeros 100 chars):', mensaje.substring(0, 100));
    console.log('Metadata:', JSON.stringify(metadata));

    // Validar tel√©fono
    if (!validarTelefono(telefono)) {
      console.warn(`‚ö†Ô∏è  Tel√©fono inv√°lido: ${telefono}`);
      console.log('‚ùå Validaci√≥n fall√≥ - retornando error');
      return { success: false, error: 'Tel√©fono inv√°lido. Formato: +51XXXXXXXXX' };
    }
    console.log('‚úÖ Tel√©fono v√°lido');

    // Validar longitud del mensaje
    if (mensaje.length > 1600) {
      console.warn(`‚ö†Ô∏è  Mensaje muy largo: ${mensaje.length} caracteres - truncando`);
      mensaje = mensaje.substring(0, 1600);
    }
    console.log('‚úÖ Longitud de mensaje OK:', mensaje.length, 'caracteres');

    // Verificar duplicados
    console.log('üîç Verificando duplicados...');
    const esDuplicado = await existeNotificacionReciente(telefono, mensaje);
    if (esDuplicado) {
      console.log(`‚è≠Ô∏è  Notificaci√≥n duplicada ignorada a ${telefono}`);
      return { success: true, duplicado: true };
    }
    console.log('‚úÖ No es duplicado');

    // SIMULADO: Guardar en base de datos
    console.log('üíæ Guardando en base de datos...');
    const notificacion = await prisma.notificacion.create({
      data: {
        tipo: 'whatsapp',
        destinatario: telefono,
        mensaje,
        estado: 'enviada',
        enviadaEn: new Date(),
        metadata
      }
    });

    console.log('===========================================');
    console.log('‚úÖ NOTIFICACI√ìN GUARDADA EXITOSAMENTE');
    console.log('===========================================');
    console.log(`üì± WhatsApp SIMULADO enviado a ${telefono}`);
    console.log(`   Mensaje: ${mensaje.substring(0, 50)}${mensaje.length > 50 ? '...' : ''}`);
    console.log(`   ID: ${notificacion.id}`);
    console.log(`   Estado: ${notificacion.estado}`);
    console.log(`   Creado: ${notificacion.createdAt}`);
    console.log('===========================================\n');

    return {
      success: true,
      notificacionId: notificacion.id
    };

  } catch (error) {
    console.error('‚ùå Error al enviar WhatsApp:', error);
    
    // Guardar notificaci√≥n fallida
    try {
      await prisma.notificacion.create({
        data: {
          tipo: 'whatsapp',
          destinatario: telefono,
          mensaje,
          estado: 'fallida',
          error: error.message,
          metadata
        }
      });
    } catch (dbError) {
      console.error('‚ùå Error al guardar notificaci√≥n fallida:', dbError);
    }

    return {
      success: false,
      error: error.message
    };
  }
};

/**
 * TEMPLATES DE MENSAJES
 */
const templates = {
  /**
   * Pedido creado (para cliente)
   */
  pedidoCreado: (nombreTienda, linkRastreo) => {
    return `üéâ *¬°Tu pedido ha sido creado!*

üì¶ Tienda: ${nombreTienda}

Estamos buscando un motorizado para tu entrega.

üîó Rastrea tu pedido aqu√≠:
${linkRastreo}

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Pedido asignado (para cliente)
   */
  pedidoAsignado: (nombreMotorizado, tiempoEstimado) => {
    return `‚úÖ *¬°Tu pedido ha sido asignado!*

üèçÔ∏è Motorizado: ${nombreMotorizado}
‚è±Ô∏è Tiempo estimado: ${tiempoEstimado} minutos

Tu pedido est√° siendo preparado.

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Pedido en camino (para cliente)
   */
  pedidoEnCamino: (linkRastreo) => {
    return `üöÄ *¬°Tu pedido est√° en camino!*

El motorizado ha iniciado la entrega.

üìç Sigue la ubicaci√≥n en tiempo real:
${linkRastreo}

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Pedido cerca (para cliente)
   */
  pedidoCerca: () => {
    return `üìç *¬°Tu motorizado est√° cerca!*

Prep√°rate para recibir tu pedido.
Llegar√° en los pr√≥ximos minutos.

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Pedido entregado (para cliente)
   */
  pedidoEntregado: (nombreTienda) => {
    return `‚úÖ *¬°Pedido entregado con √©xito!*

üì¶ Tienda: ${nombreTienda}

Gracias por usar FLIPY.
¬°Esperamos verte pronto! üéâ

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Nueva oferta (para tienda)
   */
  nuevaOferta: (envioId, precio, tiempo) => {
    return `üí∞ *¬°Nueva oferta recibida!*

üì¶ Env√≠o ID: ${envioId.substring(0, 8)}...
üíµ Precio: S/ ${precio.toFixed(2)}
‚è±Ô∏è Tiempo estimado: ${tiempo} min

Revisa tu dashboard para aceptar la oferta.

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Oferta ganada (para motorizado)
   */
  ofertaGanada: (envioId, direccionRecogida) => {
    return `üéâ *¬°Tu oferta fue aceptada!*

üì¶ Env√≠o ID: ${envioId.substring(0, 8)}...
üìç Direcci√≥n de recogida:
${direccionRecogida}

Ve al dashboard para iniciar el env√≠o.

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Bienvenida tienda
   */
  bienvenidaTienda: (nombreTienda) => {
    return `üéâ *¬°Bienvenido a FLIPY!*

Hola ${nombreTienda},

Tu cuenta ha sido creada exitosamente.
Ya puedes crear tus primeros env√≠os.

üì± Dashboard: https://flipy.app/dashboard

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Bienvenida motorizado
   */
  bienvenidaMotorizado: (nombreMotorizado) => {
    return `üèçÔ∏è *¬°Bienvenido a FLIPY!*

Hola ${nombreMotorizado},

Tu cuenta ha sido activada.
Comienza a recibir ofertas de entrega.

‚ö° 7 d√≠as de prueba gratis incluidos

üì± Dashboard: https://flipy.app/motorizado/dashboard

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Trial expirando
   */
  trialExpirando: (diasRestantes) => {
    return `‚è∞ *Tu trial est√° por expirar*

Te quedan ${diasRestantes} d√≠a${diasRestantes !== 1 ? 's' : ''} de prueba gratis.

üí≥ Activa tu suscripci√≥n para continuar:
https://flipy.app/motorizado/suscripcion

_FLIPY - Delivery con pujas_`;
  },

  /**
   * Suscripci√≥n activada
   */
  suscripcionActivada: () => {
    return `‚úÖ *¬°Suscripci√≥n activada!*

Tu pago fue procesado exitosamente.
Ya puedes seguir recibiendo ofertas.

üí∞ Pr√≥ximo pago en 30 d√≠as

_FLIPY - Delivery con pujas_`;
  }
};

module.exports = {
  enviarWhatsApp,
  templates,
  validarTelefono
};




